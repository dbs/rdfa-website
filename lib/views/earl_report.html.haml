-# This template is used for generating a rollup EARL report. It expects to be
-# called with a single _tests_ local with the following structure
-#
-#  {
-#    "@context": "http://rdfa.info/contexts/rdfa-earl.jsonld",
-#    "@id": "http://rdfa.info/test-suite/",
-#    "@type": "earl:Software",
-#    "homepage": "http://rdfa.info/",
-#    "title": "RDFa Test Suite",
-#    "processor": [
-#      {
-#        "@id": "http://www.w3.org/2012/pyRdfa/extract?uri=",
-#        "@type": "earl:TestSubject",
-#        "name": "pyrdfa"
-#      },
-#      ...
-#    ],
-#    "entries": [{
-#      "@id": "http://rdfa.info/test-suite/test-cases/rdfa1.1/html5/manifest",
-#      "@type": [
-#        "earl:Report",
-#        "mf:Manifest"
-#      ],
-#      "title": "HTML5+RDFa 1.1",
-#      "description": [
-#        "RDFa Core 1.1 [[RDFA-CORE]] defines core processing rules for independent of host language, and provides default processing rules for XML-based host languages.",
-#        "The HTML5 [[HTML5]] RDFa Host Language is defined in [[HTML-RDFA]]. HTML+RDFa extends RDFa Core 1.1 [[RDFA-CORE]] with host-language specific processing rules."
-#      ],
-#      "entries": [{
-#        "@id": "http://rdfa.info/test-suite/test-cases/rdfa1.1/html5/manifest#0001",
-#        "@type": "earl:TestCase",
-#        "title": "Test 0001: Predicate establishment with @property",
-#        "description": "Tests @property to establish the predicate; literal object is in the content of the element."
-#        "testAction": {
-#          "@type": "qt:QueryTest",
-#          "queryForm": "qt:QueryAsk",
-#          "query": "http://rdfa.info/test-suite/test-cases/rdfa1.1/html5/0001.sparql",
-#          "data": "http://rdfa.info/test-suite/test-cases/rdfa1.1/html5/0001.html"
-#        },
-#        "testResult": true,
-#        "assertions": [
-#          {
-#            "@type": "earl:Assertion",
-#            "assertedBy": "http://rdfa.info/test-suite/",
-#            "test": "http://rdfa.info/test-suite/test-cases/rdfa1.1/html5/manifest#0001",
-#            "subject": "http://rubygems.org/gems/rdf-rdfa",
-#            "mode": "earl:automatic",
-#            "result": {
-#              "@type": "earl:TestResult",
-#              "outcome": "earl:passed"
-#            }
-#          }
-#        ]
-#      }]
-#    }
-#  }
-# Split 'rdfa1.1' into two parts, for defined languages, and other

- test_info = {}
!!! 5
%html{:lang => "en"}
  - processors = tests['processor']
  %head
    %meta{"http-equiv" => "Content-Type", :content => "text/html;charset=utf-8"}
    %title
      RDFa 1.1 Processor Conformance
    %script.remove{:type => "text/javascript", :src => "http://www.w3.org/Tools/respec/respec-w3c-common"}
    :javascript
      var respecConfig = {
          // extend the bibliography entries
          localBiblio: {
              "HTML-RDFA": "Manu Sporny. <cite><a href=\"http://www.w3.org/TR/2013/WD-html-rdfa-20130207/\">HTML+RDFa 1.1: Support for RDFa in HTML4 and HTML5.</a></cite> W3C Working Draft 07 February 2013. URL: <a href=\"http://www.w3.org/TR/2013/WD-html-rdfa-20130207/\">http://www.w3.org/TR/2013/WD-html-rdfa-20130207/</a>",
              DOAP: "Ed Dumbill. <cite><a href=\"https://github.com/edumbill/doap/wiki\">Turtle: Terse RDF Triple Language.</a></cite> Community Specification. URL: <a href=\"https://github.com/edumbill/doap/wiki\">https://github.com/edumbill/doap/wiki</a>",
          },

          // specification status (e.g. WD, LCWD, NOTE, etc.). If in doubt use ED.
          specStatus:           "unofficial",
          copyrightStart:       "2010",
          doRDFa:               "1.1",

          // the specification's short name, as in http://www.w3.org/TR/short-name/
          shortName:            "rdfa-earl",
          subtitle:             "EARL results from the RDFa 1.1 Test Suite",
          // if you wish the publication date to be other than today, set this
          publishDate:  "#{Time.now.strftime("%Y/%m/%d")}",

          // if there is a previously published draft, uncomment this and set its YYYY-MM-DD date
          // and its maturity status
          //previousPublishDate:  "2011-10-23",
          //previousMaturity:     "ED",
          //previousDiffURI:      "http://json-ld.org/spec/ED/json-ld-syntax/20111023/index.html",
          //diffTool:             "http://www.aptest.com/standards/htmldiff/htmldiff.pl",

          // if there a publicly available Editor's Draft, this is the link
          edDraftURI:           "http://rdfa.info/earl-reports/earl.html",

          // if this is a LCWD, uncomment and set the end of its review period
          // lcEnd: "2009-08-05",

          // if you want to have extra CSS, append them to this list
          // it is recommended that the respec.css stylesheet be kept
          extraCSS:             [
              "http://dev.w3.org/2009/dap/ReSpec.js/css/respec.css"
          ],

          // editors, add as many as you like
          // only "name" is required
          editors:  [
              { name: "Gregg Kellogg", url: "http://greggkellogg.net/",
                company: "Kellogg Associates", companyURL: "http://kellogg-assoc.com/" },
          ],

          // authors, add as many as you like.
          // This is optional, uncomment if you have authors as well as editors.
          // only "name" is required. Same format as editors.
          authors:  [
            { name: "Gregg Kellogg", url: "http://greggkellogg.net/",
              company: "Kellogg Associates", companyURL: "http://kellogg-assoc.com/" },
            { name: "IvÃ¡n Herman", url: "http://www.w3.org/People/Ivan/",
              company: "W3C", companyURL: "http://www.w3.org" },
            { name: "Manu Sporny", url: "http://digitalbazaar.com/",
              company: "Digital Bazaar", companyURL: "http://digitalbazaar.com/" }
          ],

          // name of the WG
          wg:           "RDF Web Applications Working Group",
          
          // URI of the public WG page
          wgURI:        "http://www.w3.org/2010/02/rdfa",
          
          // name (with the @w3c.org) of the public mailing to which comments are due
          wgPublicList: "public-rdfa",

          // URI of the patent status for this WG, for Rec-track documents
          // !!!! IMPORTANT !!!!
          // This is important for Rec-track documents, do not copy a patent URI from a random
          // document unless you know what you're doing. If in doubt ask your friendly neighbourhood
          // Team Contact.
          wgPatentURI:  "http://www.w3.org/2004/01/pp-impl/44350/status",
          maxTocLevel: 4,
          //alternateFormats: [ {uri: "diff-20120112.html", label: "diff to previous version"} ],
      };
    :css
      span[property='dc:description'] { display: none; }
      td.PASS { color: green; }
      td.FAIL { color: red; }
      table.report {
        border-width: 1px;
        border-spacing: 2px;
        border-style: outset;
        border-color: gray;
        border-collapse: separate;
        background-color: white;
      }
      table.report th {
        border-width: 1px;
        padding: 1px;
        border-style: inset;
        border-color: gray;
        background-color: white;
        -moz-border-radius: ;
      }
      table.report td {
        border-width: 1px;
        padding: 1px;
        border-style: inset;
        border-color: gray;
        background-color: white;
        -moz-border-radius: ;
      }
      tr.summary {font-weight: bold;}
      td.passed-all {color: green;}
      td.passed-most {color: darkorange;}
      td.passed-some {color: red;}
  %body{:prefix => "earl: http://www.w3.org/ns/earl# doap: http://usefulinc.com/ns/doap# rdfatest: http://rdfa.info/vocabs/rdfa-test# mf: http://www.w3.org/2001/sw/DataAccess/tests/test-manifest# qt: http://www.w3.org/2001/sw/DataAccess/tests/test-query#"}
    %section#abstract{:about => tests['@id'], :typeof => tests['@type']}
      %p
        This document reports processor conformance for [[RDFA-CORE]] and related specifications
        according to the requirements of the Evaluation and Report Language (EARL) 1.0 Schema [[EARL10-SCHEMA]].
      %p
        This document describes
        %span{:property => "doap:name"}<=tests['name']
        running at
        %a{:property => "doap:homepage", :href => tests['homepage']}<=tests['homepage']
        = '.'
        according to the requirements of the Evaluation and Report Language (EARL) 1.0 Schema [[EARL10-SCHEMA]].
      %p
        This report is also available in alternate formats:
        %a{:href => "earl.ttl"}
          Turtle
        and
        %a{:href => "earl.jsonld"}
          JSON-LD
    %section#sodt
    %section
      %h1
        Test Manifests
      - tests['entries'].each do |manifest|
        %section{:property => "mf:entries", :typeof => manifest['@type'].join(" "), :href => manifest['@id'], :inlist => true}
          %h2<=manifest['title']
          - manifest['description'].each do |desc|
            %p<= desc
          %table.report
            - skip_processor = {}
            - passed_tests = []
            %tr
              %th
                Test
              - processors.each_with_index do |processor, index|
                -# If processor is untested for every test in this manifest, skip it
                - skip_processor[processor['@id']] = manifest['entries'].all? {|t| t['assertions'][index]['result']['outcome'] == 'earl:untested'}
                - unless skip_processor[processor['@id']]
                  %th
                    %a{:href => '#' + processor['name'].gsub(/\W/, '_')}<=processor['name']
              - manifest['entries'].each do |test|
                - tid = 'test_' + test['@id'].split('#').last
                - (test_info[tid] ||= []) << test
                %tr{:property => "mf:entries", :typeof => test['@type'].join(" "), :resource => test['@id'], :inlist => true}
                  %td
                    %a{:href => "##{tid}"}
                      = test['title']
                  - test['assertions'].each_with_index do |assertion, ndx|
                    - next if skip_processor[assertion['subject']]
                    - pass_fail = assertion['result']['outcome'].split(':').last.upcase.sub(/(PASS|FAIL)ED$/, '\1')
                    - passed_tests[ndx] = (passed_tests[ndx] || 0) + (pass_fail == 'PASS' ? 1 : 0)
                    %td{:class => pass_fail, :rel => 'earl:assertions', :typeof => assertion['@type'], :inlist => true}
                      %link{:property => "earl:assertedBy", :href => assertion['assertedBy']}
                      %link{:property => "earl:test", :href => assertion['test']}
                      %link{:property => "earl:subject", :href => assertion['subject']}
                      %link{:property => 'earl:mode', :href => assertion['mode']}
                      %span{:property => "earl:result", :typeof => assertion['result']['@type'], :resource => assertion['result']['outcome']}
                        = pass_fail
              %tr.summary
                %td
                  = "Percentage passed out of #{manifest['entries'].length} Tests"
                - passed_tests.compact.each do |r|
                  - pct = (r * 100.0) / manifest['entries'].length
                  %td{:class => (pct == 100.0 ? 'passed-all' : (pct >= 95.0 ? 'passed-most' : 'passed-some'))}
                    = "#{'%.1f' % pct}%"
                  
    %section.appendix
      %h2
        Processors
      %p
        This report was tested using the following processors:
    %dl
      - processors.each_with_index do |processor, index|
        %dt{:id => processor['name'].gsub(/\W/, '_'), :about => processor['@id'], :typeof => processor['@type'].join(" "), :property => "doap:name"}
          = processor['name']
        %dd{:about => processor['@id']}
          %dl
            - if processor['doap_desc']
              %dt= "Description"
              %dd{:property => "doap:description"}<= processor['doap_desc']
            - if processor['language']
              %dt= "Programming Language"
              %dd{:property => "doap:programming-language"}<= processor['language']
            - if processor['developer']
              %dt= "Developer"
              %dd{:property => "doap:developer", :resource => processor['developer']['@id'], :typeof => processor['developer']['@type']}
                - if processor['developer']['@id']
                  %a{:href => processor['developer']['@id']}
                    %span{:property => "foaf:name"}<= processor['developer']['foaf:name']
                - else
                  %span{:property => "foaf:name"}<= processor['developer']['foaf:name']
            - if processor['homepage']
              %dt= "Home Page"
              %dd{:property => "doap:homepage"}
                %a{:href=> processor['homepage']}=processor['homepage']
            %dt
              Test Suite Compliance
            %dd
              %table.report
                %tbody
                  - tests['entries'].each do |manifest|
                    - passed = manifest['entries'].select {|t| t['assertions'][index]['result']['outcome'] == 'earl:passed' }.length
                    - next if passed == 0
                    - total = manifest['entries'].length
                    - pct = (passed * 100.0) / total
                    %tr
                      %td
                        = manifest['title']
                      %td{:class => (pct == 100.0 ? 'passed-all' : (pct >= 85.0 ? 'passed-most' : 'passed-some'))}
                        = "#{passed}/#{total} (#{'%.1f' % pct}%)"
    -#%section.appendix
    -#  %h2
    -#    Individual Test Results
    -#  %p
    -#    Individual test results used to construct this report are available here:
    -#  %ul
    -#    - source_files.each do |file|
    -#      %li
    -#        %a.source{:href => file}<= file
    %section.appendix
      %h2
        Test Definitions
      %p
        Tests are repeated for each RDFa version and Host Language as necessary, but are based on
        common tests with minor rewriting based on host language specific attributes.
      %p
        Input and SPARQL representations are shown for XHTML5, but will have some slight variation
        for different host languages.
      %dl
        - keys = test_info.keys.sort
        - test_info.keys.sort.each do |id|
          - test_defs = test_info[id]
          - test = test_defs.first
          %dt{:id => id}<= test['title']
          %dd
            %p<= test['description']
            %p
              Expected query to return
              = test['testResult'].to_s
            -# Output metadata for each test variation
            - test_defs.each do |test|
              %span{:resource => test['@id']}
                %span{:property => "dc:title mf:name", :content => test['title']}
                %span{:property => "dc:description", :content => test['description']}
                %span{:property => "mf:result", :datatype => "xsd:boolean", :content => test['testResult'].to_s}
                %div{:property => "mf:action", :typeof => test['testAction']['@type']}
                  - test['@id'].match(%r{/([a-z0-9\-\.]*)/([a-z0-9]*)/manifest#([0-9]+)})
                  - version, hostLanguage, num = $1, $2, $3
                  - man = tests['entries'].detect {|m| m['hostLanguage'] == hostLanguage && m['version'] == version}
                  %p
                    Test files for
                    = "#{man['title']}:"
                  %link{:property => "qt:queryForm", :resource => test['testAction']['queryForm']}
                  %pre.example{:property => "qt:data", :resource => test['testAction']['data'], :title => test['testAction']['data']}<
                    ~ CGI.escapeHTML(CrazyIvan::Core::get_test_content(version, hostLanguage, num)).gsub(/\n/, '<br/>').gsub(/\t/, '  ')
                  %pre.example{:property => "qt:query", :resource => test['testAction']['query'], :title => test['testAction']['query']}<
                    ~ CGI.escapeHTML(CrazyIvan::Core::get_test_content(version, hostLanguage, num, "sparql")).gsub(/\n/, '<br/>').gsub(/\t/, '  ')
